syntax = "proto3";
package  zkp_auth;


// Message for registering a new prover on the server.
// This involves sending the computed values y1 and y2, which are
// the results of raising alpha and beta to the power of x modulo p,
// respectively.
message RegisterRequest{
  string name =1;
  // Serialized BigUint representing y1 (alpha^x mod p).
  bytes y1 = 2;
  // Serialized BigUint representing y2 (beta^x mod p).
  bytes y2=3;
}
// Response message for a registration request.
// Currently empty, as the response does not carry data but indicates
// successful registration or failure through gRPC's inherent status codes.
message RegisterResponse{

}
// Message for requesting an authentication challenge from the server.
// The prover sends r1 and r2, computed as alpha^k mod p and beta^k mod p,
// respectively, where k is a nonce. The server will respond with a challenge "c".
message AuthenticationChallengeRequest{
  string user =1;
  bytes r1=2;
  bytes r2=3;
}
// Response message containing the authentication challenge.
// Includes a unique auth_id to correlate requests and responses, and
// the challenge "c" generated by the verifier.
message AuthenticationChallengeResponse{
  string auth_id=1;//request auth_id from client
  bytes c =2;
}

// Message for sending the prover's solution "s" to the challenge.
// The solution along with the auth_id from the challenge phase
// are sent to the verifier.

message AuthenticationAnswerRequest{
  string auth_id=1;//send auth_id to server
  bytes c =2;
}
// Response message for the authentication answer request.
// Contains a session_id which is issued if the solution is verified
// and authentication is successful.
message AuthenticationAnswerResponse{
  string session_id=1; //send session_id if everything worked fine
}
service Auth{
  // Registers a new prover with their y1 and y2 values.
  rpc Register(RegisterRequest) returns (RegisterResponse){}
  // Creates an authentication challenge for a registered prover.
  rpc CreateAuthenticationChallenge(AuthenticationChallengeRequest) returns (AuthenticationChallengeResponse){}
  // Verifies the prover's response to an authentication challenge.
  rpc VerifyAuthentication(AuthenticationAnswerRequest) returns (AuthenticationAnswerResponse){}
}